
#
# zplug
#

export ZPLUG_HOME=/usr/local/opt/zplug
source $ZPLUG_HOME/init.zsh

zplug "sorin-ionescu/prezto"
zplug "zsh-users/zsh-completions"
# zplug "soimort/translate-shell"
zplug "lukechilds/zsh-better-npm-completion", defer:2

# load zplug plugins
if ! zplug check --verbose; then
   printf "Install? [y/N]: "
   if read -q; then
       echo; zplug install
   fi
fi
zplug load --verbose

#
# prezto
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

#
# Zsh
#

## history
setopt interactivecomments
setopt inc_append_history
setopt share_history
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward

## enable cdr
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 5000
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

## cancel ignore "echo -n"
unsetopt promptcr

## do not kill zsh with Ctrl+d
setopt ignore_eof

## git autocomplete
__git_files () {
    _wanted files expl 'local files' _files
}

#
# System
#

export TZ=JST-9 # make virus buster scan faster
export LANG=ja_JP.UTF-8
export LC_CTYPE=ja_JP.UTF-8


#
# Editors
#

export EDITOR='vim'
export VISUAL='vim'
export XDG_CONFIG_HOME=$HOME/.config

#
# Alias
#

alias vi=nvim
alias vim=nvim

## finder
alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'

## git
alias gitmg="git branch | peco | xargs git merge"
alias gitrb="git branch | peco | xargs git rebase"
alias gitdm="git branch --merged development | grep -vE '^(\*.+)|(master|development|knock)$' | xargs git branch -d"
alias gitblg="git branch | awk '{ if (NF == 2) print $2 }' | xargs -I % git log --oneline --first-parent %"
alias gitcp="git log --oneline --branches | peco | awk '{print $1}' | xargs git cherry-pick"
alias gitrbi="git branch | awk '{ if (NF == 2) print $2 }' | xargs -I % git log --oneline --first-parent % | peco | awk '{ print $1; }' | xargs -o git rebase -i"
alias gitchrem="git branch --remotes | grep -v '\->' | peco | sed 's/origin\///' | xargs git checkout"

## docker
alias docstp="docker ps -a | peco | awk '{ print $1; }' | xargs docker stop"
alias docrmi="docker images | peco | awk '{ print $3 }' | xargs docker rmi"

## rails
alias migdown="ls -r db/migrate | peco | sed 's/_.*//' | xargs -I % rake db:migrate:down VERSION=%"
alias grepmigdown="find db/migrate -name '*.rb' | xargs grep '' | peco --initial-filter Regexp | sed 's/db\/migrate\///' | sed 's/_.*//' | xargs -I % rake db:migrate:down VERSION=%"
alias raketasks="rake -T | peco | awk '{ print $2 }' | xargs rake"

## misc
alias killselect="ps aux | peco | awk '{ print $2 }' | xargs kill"
# alias ghcd="cd `ghq list -p | peco`"

#
# Development
#

## direnv
eval "$(direnv hook zsh)"

## rbenv
eval "$(rbenv init -)"
export PATH="/usr/local/opt/libxml2/bin:$PATH"

# ## python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"

## nnodebre
export NVM_DIR="$HOME/.nvm"
. "/usr/local/opt/nvm/nvm.sh"

## android
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$ANDROID_HOME/tools:$PATH
export PATH=$ANDROID_HOME/platform-tools:$PATH

## go
export GOPATH=~/
export PATH=$GOPATH/bin:$PATH

## postgresql
PGDATA=/usr/local/var/postgres

## erlang/kerl, elixir/exenv
# . /usr/local/kerl/19.3/activate
# export PATH="$HOME/.exenv/bin:$PATH"
# eval "$(exenv init -)"

## mysql
export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/mysql@5.7/lib"
export CPPFLAGS="-I/usr/local/opt/mysql@5.7/include"
export PKG_CONFIG_PATH="/usr/local/opt/mysql@5.7/lib/pkgconfig"

## imagemagic
export PATH="/usr/local/opt/imagemagick@6/bin:$PATH"

## fastlane
export PATH="$HOME/.fastlane/bin:$PATH"

## Moddable SDK
export MODDABLE="$HOME/dev/moddable"
export PATH="$MODDABLE/build/bin/mac/release:$PATH"

# google cloud sdk
export GCLOUD_HOME="/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/"
export PATH="$GCLOUD_HOME/completion.zsh.inc:$GCLOUD_HOME/path.zsh.inc:$PATH"


# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /Users/ta.nakamura/.nodebrew/node/v10.13.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . /Users/ta.nakamura/.nodebrew/node/v10.13.0/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
#
# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=/Users/ta.nakamura/Library/Caches/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;


# export LDFLAGS="$LDFLAGS -L/usr/local/opt/readline/lib"
# export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/readline/include"
# export PKG_CONFIG_PATH="$PKG_CONFIG_PATH /usr/local/opt/readline/lib/pkgconfig"
#
# export LDFLAGS="$LDFLAGS -L/usr/local/opt/openssl/lib"
# export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/openssl/include"
# export PKG_CONFIG_PATH="$PKG_CONFIG_PATH /usr/local/opt/openssl/lib/pkgconfig"

# enable sign commit
export GPG_TTY=$(tty)

# read bashrc(must be in bottom)
test -r ~/.bashrc && . ~/.bashrc

